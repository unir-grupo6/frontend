import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';
import { inject, Injectable } from '@angular/core';
import { IRoutinesList } from '../interfaces/iroutines-list.interface';
import { lastValueFrom } from 'rxjs';
import { IAutogeneratedRoutine } from '../interfaces/iautogeneratedroutine.interface';

@Injectable({
  providedIn: 'root'
})
export class RoutinesListService {
private baseEndpoint = 'https://rutina-go-backend.onrender.com/api/routines';
private autogeneratedEndpoint = 'https://rutina-go-backend.onrender.com/api/autogenerate';
private httpClient = inject(HttpClient);

private getAuthHeaders(): HttpHeaders {
    const token = localStorage.getItem('token') || ''; // o donde tengas el token guardado
    return new HttpHeaders().set('Authorization', token);
  }


  /**
   * Obtener todas las rutinas
   */
  getRoutinesList(): Promise<IRoutinesList[]> {
      return lastValueFrom(this.httpClient.get<IRoutinesList[]>(`${this.baseEndpoint}/filter`, {
        headers: this.getAuthHeaders(),
      }));
    }

  /**
     * Obtener una rutina por ID
     * @param id ID de la rutina
     */
  getRoutineById(id: number): Promise<IRoutinesList> {
      return lastValueFrom(this.httpClient.get<IRoutinesList>(`${this.baseEndpoint}/${id}`, {
        headers: this.getAuthHeaders(),
      }));
    }

  getFilteredRoutinesList(objetivoId: number,
      dificultadId: number): Promise<IRoutinesList[]> {
        const params = new HttpParams()
        .set('objetivos_id', objetivoId)
        .set('dificultad_id', dificultadId);
        
        return lastValueFrom(this.httpClient.get<IRoutinesList[]>(`${this.baseEndpoint}/filter?${params.toString()}`,
          {
            headers: this.getAuthHeaders()
          }
        ));
  }

  generateRoutine(): Promise<IAutogeneratedRoutine> {

    console.log('auth headers', this.getAuthHeaders().get('Authorization'));
    console.log('autogeneratedEndpoint', this.autogeneratedEndpoint);

    return lastValueFrom(this.httpClient.post<IAutogeneratedRoutine>(
      this.autogeneratedEndpoint,
      {},
      {
        headers: this.getAuthHeaders()
      }
    ));
  }
}
